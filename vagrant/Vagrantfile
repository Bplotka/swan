#!/usr/bin/env bash
# q -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|

  vagrant_user=ENV['VAGRANT_USER'] || 'vagrant'
  # if this env is set, it means that we are not building
  # out a full image, but just bringing up an image with
  # some of the dependencies installed on it. This is being
  # used to cache dependencies on an AMI.
  only_cache_dependencies=(ENV['BUILD_CACHED_IMAGE'] == 'true')

  # SSH agent forwarding (for host private keys)
  config.ssh.forward_agent = true
  config.ssh.keys_only = false

  config.vm.box = "squall0gd/centos"
  config.vm.box_check_update = false

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "10.141.141.10"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  if ! only_cache_dependencies
    home_dir = vagrant_user == 'root' ? '/root/' : "/home/#{vagrant_user}"
    config.vm.synced_folder "..", "#{home_dir}/go/src/github.com/intelsdi-x/athena", :mount_options => ["umask=0022,dmask=0022,fmask=0022"]
  end

  config.vm.provider "virtualbox" do |vb, override|
    vb.gui = false
    vb.name = "athena"

    vb.cpus = 2       # NOTE: integration tests fail with less than 2
    vb.memory = 4096  # NOTE: integration tests tend to crash with less (gcc)
    override.ssh.keys_only = true
    override.vm.synced_folder "~/.glide", "#{home_dir}/.glide", :mount_options => ["umask=0022,dmask=0022,fmask=0022"]
  end

  config.vm.provider :aws do |aws, override|
    require 'yaml'
    # load a file at this location that can be used to set aws specific
    # information. This allows you to set your own credentials, but also
    # custom what ami the job runs on.
    file = "#{ENV['HOME']}/.vagrant/aws-creds"
    if File.exists?(file)
      data = YAML.load_file(file)
    else
      data = {}
    end
    override.nfs.functional = false
    aws.access_key_id = data['access_key_id']
    aws.secret_access_key = data['secret_access_key']
    aws.block_device_mapping = [{'DeviceName' => '/dev/sda1',
                                 'Ebs.VolumeSize' => 40,
                                 'Ebs.DeleteOnTermination' => true }]
    override.vm.box = "aws"
    # requiretty cannot be set in sudoers for vagrant to work
    aws.user_data = "#!/bin/bash\nsed -i 's/Defaults    requiretty/#Defaults    requiretty/' /etc/sudoers"
    # centos7 for us-east
    aws.ami = (ENV['ATHENA_AMI'] != '' && ENV['ATHENA_AMI']) || data['ami'] || "ami-d0363bc7"
    aws.instance_type = (ENV['ATHENA_INSTANCE_TYPE'] != '' && ENV['ATHENA_INSTANCE_TYPE']) || data['instance_type'] || "m3.medium"
    aws.keypair_name = data['keypair_name'] || "snapbot-private"
    override.ssh.username = data['ssh_username'] || "centos"
  end

  $install_packages = <<SCRIPT
    echo Adding the docker yum repository
    tee /etc/yum.repos.d/docker.repo <<-'EOF'
[dockerrepo]
name=Docker Repository
baseurl=https://yum.dockerproject.org/repo/main/centos/$releasever/
enabled=1
gpgcheck=1
gpgkey=https://yum.dockerproject.org/gpg
EOF
    echo Updating package lists
    yum update -y
    yum install -y epel-release  # Enables EPEL repo
    yum clean all
    echo Installing packages
    yum install -y \
      docker-engine \
      etcd \
      gcc \
      gcc-g++ \
      gengetopt \
      git \
      hg \
      iptables \
      libcgroup-tools \
      libevent-devel \
      moreutils-parallel \
      nmap-ncat \
      patch \
      perf \
      psmisc \
      pssh \
      python-pip \
      python-devel \
      scons \
      tree \
      vim \
      wget
    if [ ! -f /tmp/go1.7.linux-amd64.tar.gz ]; then
      wget -P /tmp https://storage.googleapis.com/golang/go1.7.linux-amd64.tar.gz
      rm -fr /usr/local/go
      tar xvf /tmp/go1.7.linux-amd64.tar.gz -C /usr/local
    fi
SCRIPT

  $configure_etcd = <<SCRIPT
    echo Configuring etcd
    systemctl enable etcd
    systemctl restart etcd
SCRIPT

  $configure_docker = <<SCRIPT
    echo Configuring Docker
    systemctl enable docker
    # Add the vagrant user to the docker group
    gpasswd -a $VAGRANT_USER docker
    systemctl restart docker
    echo "docker.service status:"
    systemctl show -p SubState docker.service
SCRIPT

  $setup_user_env = <<SCRIPT
    echo "Setting up user environment"
    # Vagrant user owns $GOPATH
    chown -R $VAGRANT_USER:$VAGRANT_USER $HOME_DIR/go
    # Create convenient symlinks in the home directory
    ln -sf $HOME_DIR/go/src/github.com/intelsdi-x/athena $HOME_DIR
    # Add GOPATH and Go binaries to PATH in profile
    echo "export GOPATH=\"$HOME_DIR/go\"" >> $HOME_DIR/.bash_profile
    echo 'export PATH="$PATH:/usr/local/go/bin:$GOPATH/bin"' >> $HOME_DIR/.bash_profile
    # Rewrite github URLs for fetching private repos (requires ssh-agent)
    sudo -u $VAGRANT_USER git config --global url."git@github.com:".insteadOf "https://github.com/"
    git config --global url."git@github.com:".insteadOf "https://github.com/"
    # Add key to SSH agent (fail when no ssh-agent is accessible, one won't be able to download private repos)
    ssh-add -l
    mkdir -p /root/.ssh
    mkdir -p $HOME_DIR/.ssh
    GITHUB_KEY=`ssh-keyscan github.com`
    echo $GITHUB_KEY>>/root/.ssh/known_hosts
    echo $GITHUB_KEY>>$HOME_DIR/.ssh/known_hosts
SCRIPT

  $configure_cassandra = <<SCRIPT
    echo "Setting up cassandra"
    # Set up data directory
    mkdir -p /var/data/cassandra
    chcon -Rt svirt_sandbox_file_t /var/data/cassandra # SELinux policy
    # Create and enable systemd unit
    cp $HOME_DIR/athena/vagrant/resources/cassandra.service /etc/systemd/system
    mkdir -p /opt/athena/resources
    cp $HOME_DIR/athena/vagrant/resources/keyspace.cql /opt/athena/resources
    cp $HOME_DIR/athena/vagrant/resources/table.cql /opt/athena/resources
    systemctl daemon-reload
    systemctl enable cassandra.service
    echo "Restarting cassandra..."
    systemctl restart cassandra.service
    echo "cassandra.service status:"
    systemctl show -p SubState cassandra.service
SCRIPT

  $install_glide = <<SCRIPT
  echo "Installing Glide..."
  source $HOME_DIR/.bash_profile
  go get github.com/Masterminds/glide
SCRIPT

  $install_godep = <<SCRIPT
  echo "Installing Godep..."
  source $HOME_DIR/.bash_profile
  go get github.com/tools/godep
SCRIPT


  $install_kubernetes = <<SCRIPT
  source $HOME_DIR/.bash_profile
  cd $GOPATH/src/github.com/intelsdi-x/athena
  ./misc/kubernetes/install_binaries.sh
SCRIPT

  $install_snap = <<SCRIPT
    source $HOME_DIR/.bash_profile
    SNAP_VERSION="1.0.0"

    echo "Installing Snap (version $SNAP_VERSION)..."
    if [ ! -f /cache/snap-${SNAP_VERSION}-linux-amd64.tar.gz ]; then
        wget -q -P /cache https://github.com/intelsdi-x/snap/releases/download/${SNAP_VERSION}/snap-${SNAP_VERSION}-linux-amd64.tar.gz
        tar xf /cache/snap-${SNAP_VERSION}-linux-amd64.tar.gz -C /cache
        mv /cache/snaptel $GOPATH/bin
        mv /cache/snapteld $GOPATH/bin
    fi

SCRIPT

  $install_docker_collector = <<SCRIPT
  source $HOME_DIR/.bash_profile
  SNAP_PLUGIN_COLLECTOR_DOCKER_VERSION=5
  echo "Installing snap-plugin-collector-docker (version $SNAP_PLUGIN_COLLECTOR_DOCKER_VERSION)..."
  wget -q https://github.com/intelsdi-x/snap-plugin-collector-docker/releases/download/${SNAP_PLUGIN_COLLECTOR_DOCKER_VERSION}/snap-plugin-collector-docker_linux_x86_64 -O $GOPATH/bin/snap-plugin-collector-docker
  chmod +x  $GOPATH/bin/snap-plugin-collector-docker
SCRIPT

  $install_file_publisher = <<SCRIPT
  source $HOME_DIR/.bash_profile
  SNAP_PLUGIN_PUBLISHER_FILE_VERSION=2
  echo "Installing snap-plugin-publisher-file (version $SNAP_PLUGIN_PUBLISHER_FILE_VERSION)..."
  wget -q https://github.com/intelsdi-x/snap-plugin-publisher-file/releases/download/${SNAP_PLUGIN_PUBLISHER_FILE_VERSION}/snap-plugin-publisher-file_linux_x86_64 -O $GOPATH/bin/snap-plugin-publisher-file
  chmod +x  $GOPATH/bin/snap-plugin-publisher-file
SCRIPT

  $install_cassandra_publisher = <<SCRIPT
  source $HOME_DIR/.bash_profile
  SNAP_PLUGIN_PUBLISHER_CASSANDRA_VERSION=5
  echo "Installing snap-plugin-publisher-cassandra (version $SNAP_PLUGIN_PUBLISHER_CASSANDRA_VERSION)..."
  wget -q https://github.com/intelsdi-x/snap-plugin-publisher-cassandra/releases/download/${SNAP_PLUGIN_PUBLISHER_CASSANDRA_VERSION}/snap-plugin-publisher-cassandra_linux_x86_64 -O $GOPATH/bin/snap-plugin-publisher-cassandra
  chmod +x  $GOPATH/bin/snap-plugin-publisher-cassandra
SCRIPT

  $install_snap_tag_processor = <<SCRIPT
  source $HOME_DIR/.bash_profile
  SNAP_PLUGIN_PROCESSOR_TAG_VERSION=3
  echo "Installing snap-plugin-processor-tag (version $SNAP_PLUGIN_PROCESSOR_TAG_VERSION)..."
  wget -q https://github.com/intelsdi-x/snap-plugin-processor-tag/releases/download/${SNAP_PLUGIN_PROCESSOR_TAG_VERSION}/snap-plugin-processor-tag_linux_x86_64 -O $GOPATH/bin/snap-plugin-processor-tag
  chmod +x  $GOPATH/bin/snap-plugin-processor-tag
SCRIPT

  config.vm.provision "shell", inline: $install_packages, env: {'HOME_DIR' => home_dir}
  config.vm.provision "shell", inline: $configure_etcd, env: {'HOME_DIR' => home_dir}
  if ! only_cache_dependencies
    config.vm.provision "shell", inline: $configure_docker, env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
    config.vm.provision "shell", inline: $setup_user_env, env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
    config.vm.provision "shell", inline: $install_glide, env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
    config.vm.provision "shell", inline: $install_godep, env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
    config.vm.provision "shell", inline: $configure_cassandra, env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
    config.vm.provision "shell", inline: $install_kubernetes, env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
    config.vm.provision "shell", inline: $install_snap, env: {'HOME_DIR' => home_dir}
    config.vm.provision "shell", inline: $install_docker_collector, env: {'HOME_DIR' => home_dir}
    config.vm.provision "shell", inline: $install_file_publisher, env: {'HOME_DIR' => home_dir}
    config.vm.provision "shell", inline: $install_cassandra_publisher, env: {'HOME_DIR' => home_dir}
    config.vm.provision "shell", inline: $install_snap_tag_processor, env: {'HOME_DIR' => home_dir}
    config.vm.provision "shell", inline: "chown -R $VAGRANT_USER:$VAGRANT_USER $HOME_DIR", env: {'VAGRANT_USER' => vagrant_user, 'HOME_DIR' => home_dir}
  end
end
